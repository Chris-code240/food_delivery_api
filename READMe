# Food Delivery API

## Introduction
- Welcome to my food delivery RESTful API. The API is being built to serve web and standalone applications to allow users
  browse `menus`, `place order`, and `complete order`.
- The API is being built with `Flask` framework along with:
    . `JWT` [jwt]
    . `CORS` [flask_cors]
    . `SQLAlchemy ORM` [flask_sqlachemy]

## API Reference

### Getting Started
- Base URL: The API as at now can only be run locally and is hosted at the default, `http://127.0.0.1:5000/`
- Authentication: The API does require authentication for some endpoints out of its 3 endpoints, including `POST /order` and `POST /complete-order`.
- Whiles in the root directory, run `pip install -r requirements.txt` to install all required dependencies
- In `app.py` there's a @TODO, do as it says.
- Automatically, a new user, resturant,menu and order will be created for testing (all with id of 1)
- In `config.py`, in the `SQLALCHEMY_DATABASE_URI`, supply the needed deatils (username,password and database name)
- Then, run `python app.py` to start the server/API 


### Error Handling
-Errors are returned as JSON objects in the following format

-The API will return five error types when requests fail:
- `500`: Internal Server Error
```
{
    "success":False,"message":"Internal Server Error", 
    "error": 500
}
```
- `400`: Bad Request
```
{
    "success":False,"message":"Bad Request", 
    "error": 400
}
```
- `404`: Resource Not Found
```
{
    "success":False,"message":"Resourse Not Found", 
    "error": 404
}
```
- `405`: Resource Not Found
```
{
    "success":False,"message":" `[METHOD]` is not allowed", 
    "error": 405
}
```
- `401`: User not authorized 
```
{
    "success":False,"message":"User not authorized", 
    "error": 401
}
```

### Endpoints
`NOTE` All enpoints, except `/login`, `/menus`,`/menus/id`, `/resturants`,`/resturants/id`, require verification.

#### GET /login
- General:
    - This endpoint requires user credentials and verify.
    - After verification, user can now access `POST /order` and `PUT /complete-order`
- `curl -u john:password123 http://localhost:5000/login`
```
{
  "success": true,
  "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiam9obiIsImV4cCI6MTY4NzM3NDk2MH0.-THDxGuPHdDBe_igde7Im9iY2NY2tG0QmhXe1xjgASo"
}
```


#### GET /menus
- General:
    - Returns a list of book objects, success value, and total number menus available. 
- Sample: `curl http://127.0.0.1:5000/menus`

``` 
  {
  "menus": [
    {
      "id": 1,
      "items": [
        "fufuo",
        "banku",
        "rice ball"
      ],
      "resturant_id": 1
    }
  ],
  "success": true
}
```


#### POST /order
- General:
    - This endpoint places a new order.
    - It requires a JSON object containing the `user_id`, `resturant_id`,`menu_id`, and `items` which represents the food(s) selected by the user.  
    - On success, the endpoint returns an object containing the details of the order 
- `curl -X POST -H "Content-Type: application/json" -d "{\"user_id\": 1, \"resturant_id\": 1, \"menu_id\": 1, \"items\": [\"fufuo\"]}" "http://127.0.0.1:5000/order"`
```
{
  "order": {
    "id": 2,
    "items": [
      "fufuo"
    ],
    "resturant_id": 1,
    "user_id": 1
  },
  "success": true
}


```
#### PATCH /complete-order
- General:
    - Supplying the order id in a JSON object, this enpoint will set the `completed` column of the object to `True`. 
- `curl -X PATCH -H "Content-Type: application/json" -d "{\"id\":2}" "http://localhost:5000/complete-order"`
```
{
  "message": "Order number 2 has been fulfilled",
  "success": true
}
```

#### POST /cancel-order
- General:
    - Supplying the order id in a JSON object, this enpoint will set the `completed` column of the object to `True`. 
- `curl -X PATCH -H "Content-Type: application/json" -d "{\"id\":1}" "http://localhost:5000/cancel-order"`
```
{
  "message": "Order cancelled",
  "success": true
}
```

#### GET /history
- General:
    - This endpoint returns all previouse orders whether cancelled or completed.
    `curl "http://localhost:5000/history`

```
{
  "history": [
    {
      "id": 1,
      "in_preparation": true,
      "items": [
        "fufuo",
        "rice ball"
      ],
      "cancelled": false,
      "completed": true,
      "order_received": true,
      "out_for_delivery": true,
      "resturant_id": 1,
      "user_id": 1
    }
  ],
  "total": 1
}
```





### ADMIN
   `NOTE:` All admin enpoints required a login by first verifying at the `/admin` endpoint

# POST /order-received
- General:
    - The endpoint confirms that a user's order has been received and ready to be prepared,by an admin.
    -The endpoint requires the id of the only order
    -`curl -X POST -H "Content-Type: application/json" -d "{\"id\":1}" "http://localhost:5000/order-received"`
```
{
  "message": "Order confirmed",
  "success": true
}
```

## POST /put-in-preparation
- General:
    - Obviously, the endpoint puts an order into the preparation phase.
    - The endpoint requires only the id of the order
    - `curl -X POST -H "Content-Type: application/json" -d "{\"id\":1}" "http://localhost:5000/put-in-preparation"`
```
{
  "message": "Order confirmed",
  "success": true
}
```

### POST /in-transit
- General:
    - This endpoint puts the order into the delivery phase until the user confirms oder-received.
    - The endpoint requires only the id of the order
    - `curl -X POST -H "Content-Type: application/json" -d "{\"id\":1}" "http://localhost:5000/in-transit"`
```
{
  "message": "Order 1 is in transit for delivery",
  "success": true
}
```

#### GET /out-for-delivery
- General:
    - Admin can get all orders in deliver with this enpoint
    - No parameter required
    -  `curl "http://localhost:5000/out-for-delivery"`
```
{
  "orders_in_delivery": [
    {
      "id": 1,
      "in_preparation": true,
      "items": [
        "fufuo",
        "rice ball"
      ],
      "order_received": true,
      "out_for_delivery": true,
      "resturant_id": 1,
      "user_id": 1
    }
  ],
  "total": 1
}
```

#### GET /in-preparation
- General:
    - This enpoint returns all orders in preparation phase.
    - No parameter required
    - `curl "http://localhost:5000/in-preparation"`
```
{
  "orders_in_delivery": [
    {
      "id": 1,
      "in_preparation": true,
      "items": [
        "fufuo",
        "rice ball"
      ],
      "order_received": true,
      "out_for_delivery": false,
      "resturant_id": 1,
      "user_id": 1
    }
  ],
  "total": 1
}
```



